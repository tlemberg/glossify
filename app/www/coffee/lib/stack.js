// Generated by CoffeeScript 1.9.2
(function() {
  define(['utils', 'storage'], function(utils, storage) {
    var DICTIONARY_SIZE, SECTION_SIZE, _getBoxInterval, _getBoxes, _getPhraseIds, _getProgressPercentage, _getSectionInterval, boxSize;
    SECTION_SIZE = 1000;
    DICTIONARY_SIZE = 10000;
    boxSize = 100;
    _getSectionInterval = function(section) {
      var maxIndex, minIndex;
      minIndex = minIndex = (section - 1) * SECTION_SIZE;
      maxIndex = minIndex + SECTION_SIZE - 1;
      return {
        min: minIndex,
        max: maxIndex
      };
    };
    _getBoxInterval = function(section, box) {
      var maxIndex, minIndex;
      minIndex = (section - 1) * SECTION_SIZE + box * boxSize;
      maxIndex = minIndex + boxSize;
      return {
        min: minIndex,
        max: maxIndex
      };
    };
    _getPhraseIds = function(plan, section, boxIndex, lang) {
      var maxIndex, minIndex;
      minIndex = minIndex = (section - 1) * SECTION_SIZE + boxIndex * boxSize;
      maxIndex = minIndex + boxSize;
      console.log(minIndex);
      console.log(maxIndex);
      console.log("-----");
      console.log(plan.slice(minIndex, maxIndex));
      return plan.slice(minIndex, maxIndex);
    };
    _getBoxes = function(plan, dictionary, section, lang, cardsPerBox) {
      var box, boxIndex, boxes, i, nBoxes, percent, phraseId, phraseIds, ref, sample, samplePhraseIds, sampleWords;
      nBoxes = SECTION_SIZE / cardsPerBox;
      boxes = [];
      for (boxIndex = i = 0, ref = nBoxes - 1; 0 <= ref ? i <= ref : i >= ref; boxIndex = 0 <= ref ? ++i : --i) {
        phraseIds = _getPhraseIds(plan, section, boxIndex, lang);
        if (phraseIds.length > 0) {
          samplePhraseIds = phraseIds.slice(0, 4);
          console.log(Object.keys(dictionary['dictionary']).length);
          console.log(samplePhraseIds);
          sampleWords = (function() {
            var j, len, results;
            results = [];
            for (j = 0, len = samplePhraseIds.length; j < len; j++) {
              phraseId = samplePhraseIds[j];
              results.push(dictionary['dictionary'][phraseId]['base']);
            }
            return results;
          })();
          sample = sampleWords.join(', ') + "...";
          percent = _getProgressPercentage(phraseIds);
          box = {
            sample: sample,
            index: boxIndex,
            percent: percent
          };
          boxes.push(box);
        }
      }
      return boxes;
    };
    _getProgressPercentage = function(phraseIds) {
      var i, len, maxProgress, phraseId, totalProgress;
      maxProgress = 5 * phraseIds.length;
      totalProgress = 0;
      for (i = 0, len = phraseIds.length; i < len; i++) {
        phraseId = phraseIds[i];
        totalProgress += storage.getProgress(phraseId);
      }
      return Math.floor(totalProgress / maxProgress * 100);
    };
    return {
      getSectionInterval: function(section) {
        return _getSectionInterval(section);
      },
      getBoxInterval: function(section, box) {
        return _getBoxInterval(section, box);
      },
      getPhraseIds: function(section, box, lang) {
        return _getPhraseIds(section, box, lang);
      },
      getBoxes: function(userProfile, dictionary, section, lang, cardsPerBox) {
        return _getBoxes(userProfile, dictionary, section, lang, cardsPerBox);
      }
    };
  });

}).call(this);
