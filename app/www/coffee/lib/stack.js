// Generated by CoffeeScript 1.9.1
(function() {
  define(['utils', 'storage'], function(utils, storage) {
    var DICTIONARY_SIZE, SECTION_SIZE, _getBoxInterval, _getBoxes, _getCards, _getProgressPercentage, _getSectionInterval, boxSize;
    SECTION_SIZE = 1000;
    DICTIONARY_SIZE = 10000;
    boxSize = 100;
    _getSectionInterval = function(section) {
      var maxIndex, minIndex;
      minIndex = minIndex = (section - 1) * SECTION_SIZE;
      maxIndex = minIndex + SECTION_SIZE - 1;
      return {
        min: minIndex,
        max: maxIndex
      };
    };
    _getBoxInterval = function(section, box) {
      var maxIndex, minIndex;
      minIndex = minIndex = (section - 1) * SECTION_SIZE;
      maxIndex = minIndex + boxSize;
      return {
        min: minIndex,
        max: maxIndex
      };
    };
    _getCards = function(userProfile, section, boxIndex, lang) {
      var maxIndex, minIndex;
      minIndex = minIndex = (section - 1) * SECTION_SIZE + boxIndex * boxSize;
      maxIndex = minIndex + boxSize;
      return userProfile['langs'][lang].slice(minIndex, maxIndex);
    };
    _getBoxes = function(userProfile, dictionary, section, lang, cardsPerBox) {
      var box, boxIndex, boxes, card, cards, i, nBoxes, ref, sample, sampleCards, sampleWords;
      nBoxes = SECTION_SIZE / cardsPerBox;
      boxes = [];
      for (boxIndex = i = 0, ref = nBoxes - 1; 0 <= ref ? i <= ref : i >= ref; boxIndex = 0 <= ref ? ++i : --i) {
        cards = _getCards(userProfile, section, boxIndex, lang);
        sampleCards = cards.slice(0, 4);
        sampleWords = (function() {
          var j, len, results;
          results = [];
          for (j = 0, len = sampleCards.length; j < len; j++) {
            card = sampleCards[j];
            results.push(dictionary['dictionary'][card['phrase_id']]['base']);
          }
          return results;
        })();
        sample = sampleWords.join(', ') + "...";
        box = {
          sample: sample,
          index: boxIndex
        };
        boxes.push(box);
      }
      return boxes;
    };
    _getProgressPercentage = function(cards) {
      var card, i, len, maxProgress, ref, totalProgress;
      maxProgress = 5 * _deck['cards'].length;
      totalProgress = 0;
      ref = _deck['cards'];
      for (i = 0, len = ref.length; i < len; i++) {
        card = ref[i];
        totalProgress += card['progress'];
      }
      return Math.floor(totalProgress / maxProgress * 100);
    };
    return {
      getSectionInterval: function(section) {
        return _getSectionInterval(section);
      },
      getBoxInterval: function(section, box) {
        return _getBoxInterval(section, box);
      },
      getCards: function(section, box, lang) {
        return _getCards(section, box, lang);
      },
      getBoxes: function(userProfile, dictionary, section, lang, cardsPerBox) {
        return _getBoxes(userProfile, dictionary, section, lang, cardsPerBox);
      },
      getProgressPercentage: function(cards) {
        return _getProgressPercentage(cards);
      }
    };
  });

}).call(this);
