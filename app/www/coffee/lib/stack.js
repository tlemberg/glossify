// Generated by CoffeeScript 1.9.2
(function() {
  define(['utils', 'storage'], function(utils, storage) {
    var DICTIONARY_SIZE, _addExcerpt, _getBoxes, _getExcerpt, _getProgressPercentage, _updateProgressBars;
    DICTIONARY_SIZE = 10000;
    _getBoxes = function(plan, documentId) {
      var box, boxes, excerpt, excerptId, excerpt_dict, includePron, l, lang, len, nBoxes, phraseIds, progressLevels, ref, sample;
      excerpt_dict = storage.getExcerpts();
      lang = storage.getLanguage();
      boxes = [];
      nBoxes = plan.length;
      console.log(excerpt_dict);
      ref = plan[documentId];
      for (l = 0, len = ref.length; l < len; l++) {
        excerptId = ref[l];
        excerpt = excerpt_dict[excerptId];
        phraseIds = excerpt['phrase_ids'];
        if (phraseIds.length > 0) {
          sample = excerpt['excerpt'];
          progressLevels = [1, 2, 3, 4, 5];
          includePron = void 0;
          if (lang === 'he' || lang === 'zh') {
            includePron = 1;
          }
          box = {
            phraseIds: phraseIds,
            sample: sample,
            excerptId: excerptId,
            progressLevels: progressLevels,
            include_pron: includePron
          };
          boxes.push(box);
        }
      }
      return boxes;
    };
    _getProgressPercentage = function(phraseIds, studyMode) {
      var l, len, maxProgress, phraseId, totalProgress;
      maxProgress = 5 * phraseIds.length;
      totalProgress = 0;
      for (l = 0, len = phraseIds.length; l < len; l++) {
        phraseId = phraseIds[l];
        totalProgress += storage.getProgress(phraseId, studyMode);
      }
      return Math.floor(totalProgress / maxProgress * 100);
    };
    _updateProgressBars = function(className, phraseIds) {
      var count, l, len, len1, m, percent, phraseId, progress, progressHash, ref, results, studyMode, totalProgress, widthStr;
      console.log(className);
      console.log(phraseIds);
      ref = ['defs', 'pron'];
      results = [];
      for (l = 0, len = ref.length; l < len; l++) {
        studyMode = ref[l];
        progressHash = {
          1: 0,
          2: 0,
          3: 0,
          4: 0,
          5: 0
        };
        totalProgress = 0;
        for (m = 0, len1 = phraseIds.length; m < len1; m++) {
          phraseId = phraseIds[m];
          progress = storage.getProgress(phraseId, studyMode);
          if (progress > 0) {
            progressHash[progress] += 1;
            totalProgress += 1;
          }
        }
        results.push((function() {
          var len2, n, ref1, results1;
          ref1 = Object.keys(progressHash);
          results1 = [];
          for (n = 0, len2 = ref1.length; n < len2; n++) {
            progress = ref1[n];
            count = progressHash[progress];
            percent = 0;
            if (count > 0) {
              percent += count / phraseIds.length * 100;
            }
            widthStr = utils.withUnit(percent, '%');
            $("." + className + " .progress-box-" + studyMode + " .progress-bar-" + progress).css('width', widthStr);
            results1.push($("." + className + " .progress-box-" + studyMode + " .progress-counter-" + progress).html("" + count));
          }
          return results1;
        })());
      }
      return results;
    };
    _addExcerpt = function(text) {
      var dictionary, i, j, l, lang, m, phrase, phraseIds, phraseSize, plan, ref;
      lang = storage.getLanguage();
      dictionary = storage.getDictionary(lang);
      phraseIds = [];
      for (phraseSize = l = 1; l <= 4; phraseSize = ++l) {
        for (i = m = 0, ref = text.length - phraseSize + 1; 0 <= ref ? m <= ref : m >= ref; i = 0 <= ref ? ++m : --m) {
          j = i + phraseSize;
          phrase = text.substring(i, j);
          if (phrase in dictionary['bases']) {
            phraseIds.push(dictionary['bases'][phrase]);
          }
        }
      }
      plan = storage.getPlan(lang);
      plan.push({
        'excerpt': text,
        'phraseIds': phraseIds
      });
      return storage.setPlan(lang, plan);
    };
    _getExcerpt = function(plan, section, box) {
      var excerpt, planMode;
      planMode = storage.getPlanMode();
      excerpt = void 0;
      if (planMode === 'example') {
        excerpt = plan[(section - 1) * SECTION_SIZE + box]['excerpt'];
      }
      return excerpt;
    };
    return {
      getSectionInterval: function(section) {
        return _getSectionInterval(section);
      },
      getBoxInterval: function(section, box) {
        return _getBoxInterval(section, box);
      },
      getPhraseIds: function(section, box, lang) {
        return _getPhraseIds(section, box, lang);
      },
      getBoxes: function(plan, documentId) {
        return _getBoxes(plan, documentId);
      },
      updateProgressBars: function(className, phraseIds) {
        return _updateProgressBars(className, phraseIds);
      },
      addExcerpt: function(text) {
        return _addExcerpt(text);
      },
      getExcerpt: function(plan, section, box) {
        return _getExcerpt(plan, section, box);
      },
      addPhrasesToDictionary: function(d) {
        var dictionary, k, lang, v;
        lang = storage.getLanguage();
        dictionary = storage.getDictionary(lang);
        for (k in d) {
          v = d[k];
          console.log('adding');
          console.log(k);
          console.log(v);
          dictionary['dictionary'][k] = v;
        }
        console.log(Object.keys(dictionary['dictionary']).length);
        return storage.setDictionary(lang, dictionary);
      }
    };
  });

}).call(this);
