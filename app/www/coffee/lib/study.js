// Generated by CoffeeScript 1.9.2
(function() {
  define(['utils', 'stack', 'storage', 'nav', 'deck', 'pageview', 'api', 'constants', 'hbs!../../hbs/src/wordref'], function(utils, stack, storage, nav, deck, pageview, api, constants, wordrefTemplate) {
    var CARD_ASPECT, MAX_BUTTON_AREA_WIDTH, _deck, _getTxSummary, _hideFlipButton, _isFlipped, _loadPage, _nav, _phrase, _phraseIds, _refreshPage, _registerEvents, _resetCard, _resetProgress, _setBottomText, _setStudyFooterCss, _setStudyFooterHtml, _setTopText, _showFlipButton, _template, _updateConsole;
    _nav = void 0;
    _isFlipped = false;
    _phrase = void 0;
    _deck = void 0;
    _template = void 0;
    _phraseIds = void 0;
    MAX_BUTTON_AREA_WIDTH = 600;
    CARD_ASPECT = .68;
    _loadPage = function(template) {
      var box, dictionary, includePron, lang, plan, ref, ref1, section, studyMode, studyOrder, templateArgs, userProfile;
      _template = template;
      userProfile = storage.getUserProfile();
      lang = storage.getLanguage();
      section = storage.getSection();
      box = storage.getBox();
      plan = storage.getPlan(lang);
      dictionary = storage.getDictionary(lang);
      studyMode = (ref = storage.getStudyMode()) != null ? ref : 'defs';
      studyOrder = (ref1 = storage.getStudyOrder()) != null ? ref1 : 'toEnglish';
      storage.setStudyMode(studyMode);
      storage.setStudyOrder(studyOrder);
      _phraseIds = stack.getPhraseIds(plan, section, box, lang);
      _deck = deck.createDeck(_phraseIds, dictionary);
      _phrase = deck.drawPhrase(_deck, studyMode);
      _isFlipped = false;
      includePron = void 0;
      if (lang === 'he' || lang === 'zh') {
        includePron = 1;
      }
      constants = require('constants');
      templateArgs = {
        buttons: [
          {
            progress: 1,
            text: "don't know"
          }, {
            progress: 2,
            text: ""
          }, {
            progress: 3,
            text: ""
          }, {
            progress: 4,
            text: ""
          }, {
            progress: 5,
            text: "know"
          }
        ],
        lang_name: constants.langMap[lang],
        include_pron: includePron
      };
      $(".study-page").html(template(templateArgs));
      _setStudyFooterCss();
      _resetCard();
      _nav.showBackBtn("Done", function(event) {
        var progressUpdates;
        progressUpdates = storage.getProgressUpdates();
        if ((progressUpdates != null) && progressUpdates !== {}) {
          return api.updateProgress(function(json) {
            return _nav.loadPage('overview');
          });
        } else {
          return _nav.loadPage('overview');
        }
      });
      _registerEvents();
      _resetProgress();
      return _updateConsole();
    };
    _updateConsole = function() {
      var showPron, studyMode;
      showPron = storage.getShowPron();
      if (showPron) {
        $('.study-page .show-pron-btn').html('Hide pronunciation');
      } else {
        $('.study-page .show-pron-btn').html('Show pronunciation');
      }
      studyMode = storage.getStudyMode();
      if (studyMode === 'defs') {
        $('.study-page .show-pron-btn').show();
        return $('.study-page .change-study-mode-btn').html('Study pronunciation');
      } else {
        $('.study-page .show-pron-btn').hide();
        return $('.study-page .change-study-mode-btn').html('Study definitions');
      }
    };
    _registerEvents = function() {
      $('.study-page .show-pron-btn').click(function(event) {
        var showPron;
        showPron = storage.getShowPron();
        if (showPron) {
          showPron = false;
        } else {
          showPron = true;
        }
        storage.setShowPron(showPron);
        _updateConsole();
        return _resetCard();
      });
      $('.study-page .flip-btn').click(function(event) {
        _isFlipped = true;
        return _resetCard();
      });
      $('.study-page .btn').click(function(event) {
        var studyMode;
        storage.setProgress(_phrase['_id'], $(this).data('progress'), storage.getStudyMode());
        studyMode = storage.getStudyMode();
        deck.refreshDeck(_deck, studyMode);
        _phrase = deck.drawPhrase(_deck);
        _isFlipped = false;
        _resetCard();
        return _resetProgress();
      });
      $('.change-order-btn').click(function(event) {
        var studyOrder;
        studyOrder = storage.getStudyOrder();
        if (studyOrder === 'toEnglish') {
          studyOrder = 'fromEnglish';
        } else {
          studyOrder = 'toEnglish';
        }
        storage.setStudyOrder(studyOrder);
        _resetCard();
        return _updateConsole();
      });
      $('.change-study-mode-btn').click(function(event) {
        var studyMode;
        studyMode = storage.getStudyMode();
        if (studyMode === 'defs') {
          studyMode = 'pron';
        } else {
          studyMode = 'defs';
        }
        storage.setStudyMode(studyMode);
        _resetCard();
        return _updateConsole();
      });
      return $('.study-page .card-reveal-btn').click(function(event) {
        $('.study-page .card-reveal-txt').show();
        return $('.study-page .card-reveal-btn').hide();
      });
    };
    _resetProgress = function() {
      return stack.updateProgressBars('study-page', _phraseIds);
    };
    _resetCard = function() {
      var defText, i, j, lang, obj, phraseText, progressValue, pronText, studyDescription, studyMode, studyOrder, templateArgs;
      studyMode = storage.getStudyMode();
      studyOrder = storage.getStudyOrder();
      studyDescription = void 0;
      if (studyMode === 'defs') {
        if (studyOrder === 'toEnglish') {
          studyDescription = 'phrase-def';
        } else {
          studyDescription = 'def-phrase';
        }
      } else {
        if (studyOrder === 'toEnglish') {
          studyDescription = 'phrase-pron';
        } else {
          studyDescription = 'pron-phrase';
        }
      }
      phraseText = '';
      if (studyDescription === 'phrase-def') {
        if (storage.getShowPron() && (_phrase['pron'] != null)) {
          phraseText = _phrase['base'] + " (" + _phrase['pron'] + ")";
        } else {
          phraseText = _phrase['base'];
        }
      } else {
        phraseText = _phrase['base'];
      }
      defText = _getTxSummary(_phrase['txs']);
      $('.study-page .card-reveal-txt').html(defText);
      if (_isFlipped && studyMode === 'pron' && studyOrder === 'toEnglish') {
        $('.study-page .card-reveal-btn').show();
        $('.study-page .card-reveal-txt').hide();
      } else {
        $('.study-page .card-reveal-btn').hide();
        $('.study-page .card-reveal-txt').hide();
      }
      pronText = '';
      if (studyDescription === 'phrase-pron' || studyDescription === 'pron-phrase') {
        pronText = _phrase['pron'];
      }
      if (studyDescription === 'phrase-def' || studyDescription === 'phrase-pron') {
        $('.study-page .card-top-text').addClass('big-font-half');
        $('.study-page .card-top-text').removeClass('small-font-half');
        $('.study-page .card-bottom-text').addClass('small-font-half');
        $('.study-page .card-bottom-text').removeClass('big-font-half');
      } else {
        $('.study-page .card-top-text').addClass('small-font-half');
        $('.study-page .card-top-text').removeClass('big-font-half');
        $('.study-page .card-bottom-text').addClass('big-font-half');
        $('.study-page .card-bottom-text').removeClass('small-font-half');
      }
      if (studyDescription === 'phrase-def') {
        _setTopText(phraseText);
      } else if (studyDescription === 'def-phrase') {
        _setTopText(defText);
      } else if (studyDescription === 'phrase-pron') {
        _setTopText(phraseText);
      } else if (studyDescription === 'pron-phrase') {
        _setTopText(pronText);
      }
      progressValue = storage.getProgress(_phrase['_id'], studyMode);
      for (i = j = 0; j <= 5; i = ++j) {
        $('.study-page .card').removeClass("card-progress-" + i);
      }
      $('.study-page .card').addClass("card-progress-" + progressValue);
      if (!_isFlipped) {
        _showFlipButton();
      } else {
        if (studyDescription === 'phrase-def') {
          _setBottomText(defText);
        } else if (studyDescription === 'def-phrase') {
          _setBottomText(phraseText);
        } else if (studyDescription === 'phrase-pron') {
          _setBottomText(pronText);
        } else if (studyDescription === 'pron-phrase') {
          _setBottomText(phraseText);
        }
        _hideFlipButton();
      }
      lang = storage.getLanguage();
      templateArgs = (
        obj = {
          lang: lang,
          base: _phrase['base']
        },
        obj["lang_" + lang] = 1,
        obj
      );
      $(".wordref-menu").html(wordrefTemplate(templateArgs));
      return $(".study-page .study-mode-select").val(studyDescription);
    };
    _setTopText = function(text) {
      return $('.study-page .card-top-text').html(text);
    };
    _setBottomText = function(text) {
      return $('.study-page .card-bottom-text').html(text);
    };
    _refreshPage = function() {
      return _setStudyFooterCss();
    };
    _showFlipButton = function() {
      var langName, studyMode, studyOrder;
      $('.study-page .flip-btn').show();
      $('.study-page .btn-container').hide();
      $('.study-page .card-bottom-text').addClass('not-flipped');
      studyMode = storage.getStudyMode();
      studyOrder = storage.getStudyOrder();
      if (studyMode === 'defs') {
        if (studyOrder === 'toEnglish') {
          _setBottomText('in English?');
        } else {
          langName = constants.langMap[storage.getLanguage()];
          _setBottomText("in " + langName + "?");
        }
      } else {
        if (studyOrder === 'toEnglish') {
          _setBottomText('pronunciation?');
        } else {
          langName = constants.langMap[storage.getLanguage()];
          _setBottomText("in " + langName + "?");
        }
      }
      $('.study-page .card-reveal-btn').hide();
      return $('.study-page .card-reveal-txt').hide();
    };
    _hideFlipButton = function() {
      var studyMode, studyOrder;
      $('.study-page .flip-btn').hide();
      $('.study-page .btn-container').show();
      $('.study-page .card-bottom-text').removeClass('not-flipped');
      studyMode = storage.getStudyMode();
      studyOrder = storage.getStudyOrder();
      if (studyMode === 'pron' && studyOrder === 'toEnglish') {
        return $('.study-page .card-reveal-btn').show();
      }
    };
    _getTxSummary = function(txs) {
      var chunks, i, j, k, len, lines, ref, types, v;
      types = Object.keys(txs).sort(function(a, b) {
        return txs[b].length - txs[a].length;
      });
      chunks = [];
      ref = types.slice(0, 2);
      for (j = 0, len = ref.length; j < len; j++) {
        k = ref[j];
        v = txs[k];
        lines = (function() {
          var l, ref1, results;
          results = [];
          for (i = l = 0, ref1 = Math.min(v.length - 1, 1); 0 <= ref1 ? l <= ref1 : l >= ref1; i = 0 <= ref1 ? ++l : --l) {
            results.push((i + 1) + ". " + v[i]);
          }
          return results;
        })();
        chunks.push(("<div><b>" + k + "</b>") + "<br />" + lines.join("<br />") + "</div>");
      }
      return chunks.join("<br />");
    };
    _setStudyFooterHtml = function() {
      var c, footerHtml, j, results;
      footerHtml = ((function() {
        var j, results;
        results = [];
        for (c = j = 1; j <= 5; c = ++j) {
          results.push("<div id='study-btn-" + c + "' class='study-btn' data-progress=" + c + ">\n	<div class='study-btn-text'>" + c + "</div>\n</div>");
        }
        return results;
      })()).join("\n");
      $('#study-btn-container').html(footerHtml);
      results = [];
      for (c = j = 1; j <= 5; c = ++j) {
        results.push((function(c) {
          return $("#study-btn-" + c).css('background-color', BG_COLORS[c]);
        })(c));
      }
      return results;
    };
    _setStudyFooterCss = function() {
      var btnWidth, cardHeight, cardWidth;
      cardHeight = utils.windowHeight() - 200;
      cardWidth = utils.stripNumeric($('.study-page .card').css('width'));
      $('.study-page .card').css('height', cardHeight);
      btnWidth = (cardWidth - 60 - 6) / 5;
      $('.study-page .btn').css('width', btnWidth);
      $('.study-page .btn').css('height', '50px');
      $('.study-page .btn').css('margin-top', '15px');
      $('.study-page .btn').css('margin-right', '15px');
      $('.study-page .btn-5').css('margin-right', '0px');
      return $('.study-page .flip-btn').css('height', '50px');
    };
    return {
      loadPage: function(template) {
        _nav = require('nav');
        return _loadPage(template);
      },
      refreshPage: function() {
        return _refreshPage();
      }
    };
  });

}).call(this);
