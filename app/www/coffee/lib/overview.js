// Generated by CoffeeScript 1.9.1
(function() {
  var indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  define(['utils', 'storage', 'nav', 'css', 'deck'], function(utils, storage, nav, css, deck) {
    var PICKER_TILE_MARGIN, _createEmptyProgress, _loadPage, _nav, _preloadPage, _refreshPage, _registerEvents, _setPickerHtml, _setSection;
    _nav = void 0;
    PICKER_TILE_MARGIN = 10;
    _preloadPage = function() {
      return console.log('preload');
    };
    _refreshPage = function() {
      return console.log('refresh');
    };
    _loadPage = function(params) {
      var lang, section, userProfile;
      lang = storage.getLanguage();
      userProfile = storage.getUserProfile();
      if (indexOf.call(Object.keys(userProfile['langs']), lang) < 0) {
        _createEmptyProgress();
      }
      $('#overview-header').html('FRENCH');
      section = storage.getSection();
      if (!section) {
        section = 1;
      }
      _setSection(section);
      return _registerEvents();
    };
    _setPickerHtml = function() {
      var allBlocksHtml, allRowDivsHtml, boxCards, boxIndex, boxProgress, boxes, card, containerDivHtml, containerDivs, dictionary, i, j, k, l, lang, len, len1, len2, maxIndex, maxSampleIndex, minIndex, minSampleIndex, nBoxes, pickerHtml, progress, progressList, ref, ref1, ref2, ref3, rowDivHtml, rowDivs, sampleCards, sampleStr, sampleWords, section, userProfile;
      section = storage.getSection();
      lang = storage.getLanguage();
      userProfile = storage.getUserProfile();
      dictionary = storage.getDictionary(lang);
      minIndex = (section - 1) * 1000;
      maxIndex = section * 1000 - 1;
      boxes = {};
      nBoxes = deck.pageSize() / deck.boxSize();
      for (boxIndex = i = 0, ref = nBoxes - 1; 0 <= ref ? i <= ref : i >= ref; boxIndex = 0 <= ref ? ++i : --i) {
        minIndex = (section - 1) * deck.boxSize() + boxIndex * deck.boxSize();
        maxIndex = minIndex + deck.boxSize();
        boxCards = userProfile['langs'][lang].slice(minIndex, maxIndex);
        for (j = 0, len = boxCards.length; j < len; j++) {
          card = boxCards[j];
          progressList = parseInt(card['progress']);
        }
        boxProgress = Math.min(progressList);
        if (ref1 = boxProgress.toString(), indexOf.call(Object.keys(boxes), ref1) < 0) {
          boxes[boxProgress] = [];
        }
        boxes[boxProgress].push(boxIndex);
      }
      containerDivs = [];
      ref2 = Object.keys(boxes);
      for (k = 0, len1 = ref2.length; k < len1; k++) {
        progress = ref2[k];
        rowDivs = [];
        ref3 = boxes[progress];
        for (l = 0, len2 = ref3.length; l < len2; l++) {
          boxIndex = ref3[l];
          minSampleIndex = (section - 1) * deck.pageSize() + boxIndex * deck.boxSize();
          maxSampleIndex = minSampleIndex + 3;
          sampleCards = userProfile['langs'][lang].slice(minSampleIndex, maxSampleIndex);
          sampleWords = (function() {
            var len3, m, results;
            results = [];
            for (m = 0, len3 = sampleCards.length; m < len3; m++) {
              card = sampleCards[m];
              results.push(dictionary['dictionary'][card['phrase_id']]['base']);
            }
            return results;
          })();
          sampleStr = sampleWords.join(', ') + "...";
          rowDivHtml = "<a class='overview-block-row-link' data-index=" + boxIndex + "><div class='overview-block-row'>\n	<div class='overview-block-sample'>" + sampleStr + "</div>\n</div>";
          rowDivs.push(rowDivHtml);
        }
        allRowDivsHtml = rowDivs.join('');
        containerDivHtml = "<div class='overview-block'>\n	<div class='overview-block-header'>\n		HEADER\n	</div>\n	" + allRowDivsHtml + "\n</div>";
        containerDivs.push(containerDivHtml);
      }
      allBlocksHtml = containerDivs.join('');
      pickerHtml = "" + allBlocksHtml;
      $('#overview-content').html(pickerHtml);
      return _nav.refreshPage();
    };
    _setSection = function(section) {
      storage.setSection(section);
      $('#overview-display').html(section);
      _setPickerHtml();
      $('.overview-block-row-link').click(function(event) {
        var index;
        index = $(this).data('index');
        storage.setBox(index);
        return _nav.loadPage('study');
      });
      return _nav.refreshPage();
    };
    _registerEvents = function() {
      $('.overview-tile-link').click(function(event) {
        var tileId;
        event.preventDefault();
        tileId = $(this).data("tile-id");
        return _nav.loadPage('study', {
          tileId: tileId
        });
      });
      $('#overview-btn-left').click(function(event) {
        return _setSection(storage.getSection() - 1);
      });
      return $('#overview-btn-right').click(function(event) {
        return _setSection(storage.getSection() + 1);
      });
    };
    _createEmptyProgress = function() {
      var dictionary, i, lang, len, phraseId, phrases, ref, userProfile;
      lang = storage.getLanguage();
      dictionary = storage.getDictionary(lang);
      userProfile = storage.getUserProfile();
      phrases = [];
      ref = Object.keys(dictionary['dictionary']);
      for (i = 0, len = ref.length; i < len; i++) {
        phraseId = ref[i];
        phrases.push({
          phrase_id: phraseId,
          progress: 0
        });
      }
      userProfile['langs'][lang] = phrases;
      return storage.setUserProfile(userProfile);
    };
    return {
      preloadPage: function() {
        _nav = require('nav');
        return _preloadPage();
      },
      refreshPage: function() {
        return _refreshPage();
      },
      loadPage: function(params) {
        return _loadPage(params);
      }
    };
  });

}).call(this);
