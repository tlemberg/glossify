// Generated by CoffeeScript 1.9.2
(function() {
  define(['utils', 'storage'], function(utils, storage) {
    var DICTIONARY_SIZE, SECTION_SIZE, _getBoxInterval, _getBoxes, _getPhraseIds, _getProgressPercentage, _getSectionInterval, _updateProgressBars, boxSize;
    SECTION_SIZE = 1000;
    DICTIONARY_SIZE = 10000;
    boxSize = 100;
    _getSectionInterval = function(section) {
      var maxIndex, minIndex;
      minIndex = minIndex = (section - 1) * SECTION_SIZE;
      maxIndex = minIndex + SECTION_SIZE - 1;
      return {
        min: minIndex,
        max: maxIndex
      };
    };
    _getBoxInterval = function(section, box) {
      var maxIndex, minIndex;
      minIndex = (section - 1) * SECTION_SIZE + box * boxSize;
      maxIndex = minIndex + boxSize;
      return {
        min: minIndex,
        max: maxIndex
      };
    };
    _getPhraseIds = function(plan, section, boxIndex, lang) {
      var maxIndex, minIndex;
      minIndex = minIndex = (section - 1) * SECTION_SIZE + boxIndex * boxSize;
      maxIndex = minIndex + boxSize;
      return plan.slice(minIndex, maxIndex);
    };
    _getBoxes = function(plan, dictionary, section, lang, cardsPerBox) {
      var box, boxIndex, boxes, i, includePron, nBoxes, phraseId, phraseIds, progressLevels, ref, sample, samplePhraseIds, sampleWords;
      nBoxes = SECTION_SIZE / cardsPerBox;
      boxes = [];
      for (boxIndex = i = 0, ref = nBoxes - 1; 0 <= ref ? i <= ref : i >= ref; boxIndex = 0 <= ref ? ++i : --i) {
        phraseIds = _getPhraseIds(plan, section, boxIndex, lang);
        if (phraseIds.length > 0) {
          samplePhraseIds = phraseIds.slice(0, 4);
          sampleWords = (function() {
            var j, len, results;
            results = [];
            for (j = 0, len = samplePhraseIds.length; j < len; j++) {
              phraseId = samplePhraseIds[j];
              results.push(dictionary['dictionary'][phraseId]['base']);
            }
            return results;
          })();
          sample = sampleWords.join(', ') + "...";
          progressLevels = [1, 2, 3, 4, 5];
          includePron = void 0;
          if (lang === 'he' || lang === 'zh') {
            includePron = 1;
          }
          box = {
            phraseIds: phraseIds,
            minCard: (section - 1) * SECTION_SIZE + boxIndex * cardsPerBox + 1,
            maxCard: (section - 1) * SECTION_SIZE + (boxIndex + 1) * cardsPerBox,
            sample: sample,
            index: boxIndex,
            progressLevels: progressLevels,
            include_pron: includePron
          };
          boxes.push(box);
        }
      }
      return boxes;
    };
    _getProgressPercentage = function(phraseIds, studyMode) {
      var i, len, maxProgress, phraseId, totalProgress;
      maxProgress = 5 * phraseIds.length;
      totalProgress = 0;
      for (i = 0, len = phraseIds.length; i < len; i++) {
        phraseId = phraseIds[i];
        totalProgress += storage.getProgress(phraseId, studyMode);
      }
      return Math.floor(totalProgress / maxProgress * 100);
    };
    _updateProgressBars = function(className, phraseIds) {
      var count, i, j, len, len1, percent, phraseId, progress, progressHash, ref, results, studyMode, totalProgress, widthStr;
      ref = ['defs', 'pron'];
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        studyMode = ref[i];
        progressHash = {
          1: 0,
          2: 0,
          3: 0,
          4: 0,
          5: 0
        };
        totalProgress = 0;
        for (j = 0, len1 = phraseIds.length; j < len1; j++) {
          phraseId = phraseIds[j];
          progress = storage.getProgress(phraseId, studyMode);
          if (progress > 0) {
            progressHash[progress] += 1;
            totalProgress += 1;
          }
        }
        results.push((function() {
          var k, len2, ref1, results1;
          ref1 = Object.keys(progressHash);
          results1 = [];
          for (k = 0, len2 = ref1.length; k < len2; k++) {
            progress = ref1[k];
            count = progressHash[progress];
            percent = 0;
            if (count > 0) {
              percent += count / phraseIds.length * 100;
            }
            widthStr = utils.withUnit(percent, '%');
            $("." + className + " .progress-box-" + studyMode + " .progress-bar-" + progress).css('width', widthStr);
            results1.push($("." + className + " .progress-box-" + studyMode + " .progress-counter-" + progress).html("" + count));
          }
          return results1;
        })());
      }
      return results;
    };
    return {
      getSectionInterval: function(section) {
        return _getSectionInterval(section);
      },
      getBoxInterval: function(section, box) {
        return _getBoxInterval(section, box);
      },
      getPhraseIds: function(section, box, lang) {
        return _getPhraseIds(section, box, lang);
      },
      getBoxes: function(userProfile, dictionary, section, lang, cardsPerBox) {
        return _getBoxes(userProfile, dictionary, section, lang, cardsPerBox);
      },
      updateProgressBars: function(className, phraseIds) {
        return _updateProgressBars(className, phraseIds);
      }
    };
  });

}).call(this);
